from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.types import Boolean
from sqlalchemy.ext.declarative import declarative_base
import datetime

Base = declarative_base()

SQLALCHEMY_DATABASE_URL = "postgresql://postgres:admin@localhost/postgres"
engine = create_engine(SQLALCHEMY_DATABASE_URL)

# Create a SessionLocal class to handle database sessions
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)



class Example(Base):
    __tablename__ = "business"

    business_id = Column(Integer,  primary_key=True)
    business_name = Column(String(100))
    symptom_code = Column(String(100))
    symptom_name = Column(String(100))
    symptom_diagnostic = Column(Boolean, unique=False, default=True)






# """some_comment

# Revision ID: 34d352bed73f
# Revises: 
# Create Date: 2023-06-17 11:13:58.062656

# """
# from alembic import op
# import sqlalchemy as sa


# # revision identifiers, used by Alembic.
# revision = '34d352bed73f'
# down_revision = None
# branch_labels = None
# depends_on = None


# def upgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.create_table('business',
#     sa.Column('business_id', sa.Integer(), autoincrement=True, nullable=False),
#     sa.Column('business_name', sa.String(length=100), nullable=False),
#     sa.Column('symptom_code', sa.DateTime(timezone=True), nullable=False),
#     sa.Column('symptom_name', sa.DateTime(timezone=True), nullable=False),
#     sa.Column('symptom_diagnostic', sa.String(length=100), nullable=True),
#     # sa.PrimaryKeyConstraint('businessid'),
#     # sa.UniqueConstraint('id')
#     )
#     # ### end Alembic commands ###


# def downgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.drop_table('business')
#     # ### end Alembic commands ###

